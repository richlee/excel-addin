{"version":3,"file":"taskpane.js","mappings":";4QACA,+mNAyBeA,qEAAf,8FACQC,MAAMC,IAAN,6BAAU,WAAOC,GAAP,gFAERC,EAAmBD,EAAQE,SAASC,WAAWC,sBAC/CC,EAAgBJ,EAAiBK,OAAOC,IAAI,SAAS,IAC7CC,KAAO,gBAGrBH,EAAcI,oBAAoBC,OAAS,CAAC,CAAC,OAAQ,WAAY,WAAY,WAE7EL,EAAcM,KAAKJ,IAAI,KAAyB,CAC9C,CAAC,WAAY,oBAAqB,iBAAkB,OACpD,CAAC,WAAY,0BAA2B,iBAAkB,UAC1D,CAAC,WAAY,gCAAiC,YAAa,QAC3D,CAAC,YAAa,gBAAiB,aAAc,MAC7C,CAAC,YAAa,kBAAmB,YAAa,SAC9C,CAAC,YAAa,gBAAiB,QAAS,OACxC,CAAC,YAAa,gCAAiC,YAAa,WAI9DF,EAAcO,QAAQC,UAAU,GAAGC,WAAWC,aAAe,CAAC,CAAC,cAC/DV,EAAcS,WAAWE,OAAOC,iBAChCZ,EAAcS,WAAWE,OAAOE,cAtBlB,UAwBRlB,EAAQmB,OAxBA,4CAAV,uDAyBHC,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,OAAOC,OAC1BH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eA7BxD,4EAkCeC,qEAAf,8FACQ/B,MAAMC,IAAN,6BAAU,WAAOC,GAAP,gFAGRC,EAAmBD,EAAQE,SAASC,WAAWC,sBAC/CC,EAAgBJ,EAAiBK,OAAOwB,QAAQ,kBACxCC,KAAK,UACI1B,EAAcO,QAAQkB,QAAQ,YAAYE,OAClDC,kBAAkB,CAAC,YAAa,cAPjC,SASRjC,EAAQmB,OATA,2CAAV,uDAUHC,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,OAAOC,OAC1BH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eAdxD,4EAmBeM,qEAAf,8FACQpC,MAAMC,IAAN,6BAAU,WAAOC,GAAP,kFAERC,EAAmBD,EAAQE,SAASC,WAAWC,qBAC/CC,EAAgBJ,EAAiBK,OAAOwB,QAAQ,iBAChDK,EAAa,CACjB,CACEC,IAAK,EACLC,WAAW,IAIfhC,EAAciC,KAAKC,MAAMJ,GAXX,SAYRnC,EAAQmB,OAZA,2CAAV,uDAaHC,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,OAAOC,OAC1BH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eAjBxD,4EAsBeY,qEAAf,8FACQ1C,MAAMC,IAAN,6BAAU,WAAOC,GAAP,oFAERC,EAAmBD,EAAQE,SAASC,WAAWC,qBAC/CC,EAAgBJ,EAAiBK,OAAOwB,QAAQ,iBAChDW,EAAYpC,EAAcqC,oBAG1BC,EAAQ1C,EAAiB2C,OAAOrC,IAAI,kBAAmBkC,EAAW,SAGlEI,YAAY,MAAO,OACzBF,EAAMG,MAAMC,KAAO,WACnBJ,EAAMK,OAAOC,SAAW,QACxBN,EAAMK,OAAOhC,OAAOkC,KAAKC,cAAc,SACvCR,EAAMS,WAAWpC,OAAOqC,KAAKC,KAAO,GACpCX,EAAMS,WAAWpC,OAAOqC,KAAKE,MAAQ,QACrCZ,EAAMa,OAAO3C,UAAU,GAAGL,KAAO,aAhBnB,UAkBRR,EAAQmB,OAlBA,4CAAV,uDAmBHC,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,OAAOC,OAC1BH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eAvBxD,4EA4Be6B,qEAAf,8FACQ3D,MAAMC,IAAN,6BAAU,WAAOC,GAAP,wEAEWA,EAAQE,SAASC,WAAWC,qBACpCsD,YAAYC,WAAW,GAH1B,SAKR3D,EAAQmB,OALA,2CAAV,uDAMHC,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,OAAOC,OAC1BH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eAVxD,mEA1HAJ,OAAOoC,SAAQ,SAACC,GACVA,EAAKC,OAAStC,OAAOuC,SAASjE,QAChCkE,SAASC,eAAe,gBAAgBC,MAAMC,QAAU,OACxDH,SAASC,eAAe,YAAYC,MAAMC,QAAU,OAG/C3C,OAAOxB,QAAQoE,aAAaC,eAAe,WAAY,QAC1D/C,QAAQC,IAAR,mGAIFyC,SAASC,eAAe,gBAAgBK,QAAUzE,EAClDmE,SAASC,eAAe,gBAAgBK,QAAUzC,EAClDmC,SAASC,eAAe,cAAcK,QAAUpC,EAChD8B,SAASC,eAAe,gBAAgBK,QAAU9B,EAClDwB,SAASC,eAAe,iBAAiBK,QAAUb","sources":["webpack:///./src/taskpane/taskpane.js?"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n\n    // Determine if the user's version of Office supports all the Office.js APIs that are used in the tutorial.\n    if (!Office.context.requirements.isSetSupported(\"ExcelApi\", \"1.7\")) {\n      console.log(`Sorry. The tutorial add-in uses Excel.js APIs that are not available in your version of Office.`);\n    }\n\n    // Assign event handlers and other initialization logic.\n    document.getElementById(\"create-table\").onclick = createTable;\n    document.getElementById(\"filter-table\").onclick = filterTable;\n    document.getElementById(\"sort-table\").onclick = sortTable;\n    document.getElementById(\"create-chart\").onclick = createChart;\n    document.getElementById(\"freeze-header\").onclick = freezeHeader;\n  }\n});\n\nasync function createTable() {\n  await Excel.run(async (context) => {\n    // table creation logic.\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    const expensesTable = currentWorksheet.tables.add(\"A1:D1\", true /*hasHeaders*/);\n    expensesTable.name = \"ExpensesTable\";\n\n    // TODO2: Queue commands to populate the table with data.\n    expensesTable.getHeaderRowRange().values = [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n\n    expensesTable.rows.add(null /*add at the end*/, [\n      [\"1/1/2017\", \"The Phone Company\", \"Communications\", \"120\"],\n      [\"1/2/2017\", \"Northwind Electric Cars\", \"Transportation\", \"142.33\"],\n      [\"1/5/2017\", \"Best For You Organics Company\", \"Groceries\", \"27.9\"],\n      [\"1/10/2017\", \"Coho Vineyard\", \"Restaurant\", \"33\"],\n      [\"1/11/2017\", \"Bellows College\", \"Education\", \"350.1\"],\n      [\"1/15/2017\", \"Trey Research\", \"Other\", \"135\"],\n      [\"1/15/2017\", \"Best For You Organics Company\", \"Groceries\", \"97.88\"],\n    ]);\n\n    // TODO3: Queue commands to format the table.\n    expensesTable.columns.getItemAt(3).getRange().numberFormat = [[\"\\u20AC#,##0.00\"]];\n    expensesTable.getRange().format.autofitColumns();\n    expensesTable.getRange().format.autofitRows();\n\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof Office.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n}\n\nasync function filterTable() {\n  await Excel.run(async (context) => {\n    // TODO1: Queue commands to filter out all expense categories except\n    //        Groceries and Education.\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    const expensesTable = currentWorksheet.tables.getItem(\"ExpensesTable\");\n    expensesTable.load(\"filter\");\n    const categoryFilter = expensesTable.columns.getItem(\"Category\").filter;\n    categoryFilter.applyValuesFilter([\"Education\", \"Groceries\"]);\n\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof Office.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n}\n\nasync function sortTable() {\n  await Excel.run(async (context) => {\n    // TODO1: Queue commands to sort the table by Merchant name.\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    const expensesTable = currentWorksheet.tables.getItem(\"ExpensesTable\");\n    const sortFields = [\n      {\n        key: 1, // Merchant column\n        ascending: false,\n      },\n    ];\n\n    expensesTable.sort.apply(sortFields);\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof Office.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n}\n\nasync function createChart() {\n  await Excel.run(async (context) => {\n    // TODO1: Queue commands to get the range of data to be charted.\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    const expensesTable = currentWorksheet.tables.getItem(\"ExpensesTable\");\n    const dataRange = expensesTable.getDataBodyRange();\n\n    // TODO2: Queue command to create the chart and define its type.\n    const chart = currentWorksheet.charts.add(\"ColumnClustered\", dataRange, \"Auto\");\n\n    // TODO3: Queue commands to position and format the chart.\n    chart.setPosition(\"A15\", \"F30\");\n    chart.title.text = \"Expenses\";\n    chart.legend.position = \"Right\";\n    chart.legend.format.fill.setSolidColor(\"white\");\n    chart.dataLabels.format.font.size = 15;\n    chart.dataLabels.format.font.color = \"black\";\n    chart.series.getItemAt(0).name = \"Value in \\u20AC\";\n\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof Office.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n}\n\nasync function freezeHeader() {\n  await Excel.run(async (context) => {\n    // TODO1: Queue commands to keep the header visible when the user scrolls.\n    const currentWorksheet = context.workbook.worksheets.getActiveWorksheet();\n    currentWorksheet.freezePanes.freezeRows(1);\n\n    await context.sync();\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof Office.Error) {\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n  });\n}\n"],"names":["createTable","Excel","run","context","currentWorksheet","workbook","worksheets","getActiveWorksheet","expensesTable","tables","add","name","getHeaderRowRange","values","rows","columns","getItemAt","getRange","numberFormat","format","autofitColumns","autofitRows","sync","catch","error","console","log","Office","Error","JSON","stringify","debugInfo","filterTable","getItem","load","filter","applyValuesFilter","sortTable","sortFields","key","ascending","sort","apply","createChart","dataRange","getDataBodyRange","chart","charts","setPosition","title","text","legend","position","fill","setSolidColor","dataLabels","font","size","color","series","freezeHeader","freezePanes","freezeRows","onReady","info","host","HostType","document","getElementById","style","display","requirements","isSetSupported","onclick"],"sourceRoot":""}